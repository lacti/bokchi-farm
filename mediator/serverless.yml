service: bf-mediator

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
        - 'sqs:*'
        - 'dynamodb:*'
      Resource: '*'

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-existing-s3
  - serverless-offline

functions:
  init:
    handler: src/handler.init
    events:
      - http:
          path: init/{gameId}
          method: post
          request:
            parameters:
              paths:
                gameId: true
    environment:
      GAME_TABLE: ${env:GAME_TABLE}
  start:
    handler: src/handler.start
    events:
      - http:
          path: start/{gameId}
          method: post
          request:
            parameters:
              paths:
                gameId: true
          cors: true
    environment:
      GAME_TABLE: ${env:GAME_TABLE}
      FARM_TABLE: ${env:FARM_TABLE}
  act:
    handler: src/handler.act
    events:
      - http:
          path: act/{gameId}/{userId}
          method: post
          request:
            parameters:
              paths:
                gameId: true
                userId: true
          cors: true
    environment:
      TASK_QUEUE: ${env:TASK_QUEUE}
  see:
    handler: src/handler.see
    events:
      - http:
          path: see/{gameId}/{userId}
          method: post
          request:
            parameters:
              paths:
                gameId: true
                userId: true
          cors: true
    environment:
      GAME_TABLE: ${env:GAME_TABLE}
      FARM_TABLE: ${env:FARM_TABLE}
  tick:
    handler: src/handler.tick
    events:
      - http:
          path: tick
          method: post
    environment:
      TASK_QUEUE: ${env:TASK_QUEUE}
      GAME_TABLE: ${env:GAME_TABLE}
      FARM_TABLE: ${env:FARM_TABLE}
#  ticker:
#    handler: src/handler.ticker
#    events:
#      - schedule: rate(1 minutes)

resources:
  Resources:
    taskQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:TASK_QUEUE}
    gameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:GAME_TABLE}
        AttributeDefinitions:
          - AttributeName: GameId
            AttributeType: S
        KeySchema:
          - AttributeName: GameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 5
    farmTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:FARM_TABLE}
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 5
